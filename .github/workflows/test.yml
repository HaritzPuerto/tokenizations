name: test rust and python package

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
        os: [ubuntu-latest, macos-latest, windows-latest, ubuntu-16.0]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true
    - name: Test with cargo
      uses: actions-rs/cargo@v1.0.1
      with:
          command: test
          toolchain: nightly

    - name: Install dependencies with pip
      working-directory: python
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Test with pytest
      working-directory: python
      run: |
        poetry config settings.virtualenvs.in-project true
        poetry install
        poetry run maturin develop
        poetry run pytest tests

    - name: Cache target
      uses: actions/cache@v1
      with:
        path: python/target
        key: ${{ matrix.os }}-${{ github.sha }}-target

    - name: Cache venv
      uses: actions/cache@v1
      with:
        path: python/.venv
        key: ${{ matrix.os }}-${{ github.sha }}-venv

  publish:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/python/')
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
        os: [ubuntu-latest, macos-latest, windows-latest, ubuntu-16.0]
    steps:
    - name: Restore target
      uses: actions/cache@v1
      with:
        path: python/target
        key: ${{ matrix.os }}-${{ github.sha }}-target

    - name: Restore venv
      uses: actions/cache@v1
      with:
        path: python/.venv
        key: ${{ matrix.os }}-${{ hashFiles('**/package-lock.json') }}-venv

    - name: Publish test-pypi package 
      working-directory: python
      run: |
        echo -e "${{ secrets.TEST_PYPI_USER }}\n${{ secrets.TEST_PYPI_PASS }}" | poetry run maturin publish -r https://test.pypi.org/legacy/

    - name: Recreate python env and check test-pypi package
      working-directory: python
      run: |
        poetry env remove python
        poetry install
        poetry run pip install --extra-index-url https://testpypi.python.org/pypi pytokenizations
        poetry run pytest tests

    - name: Publish pypi package
      working-directory: python
      run: |
        echo -e "${{ secrets.PYPI_USER }}\n${{ secrets.PYPI_PASS }}" | poetry run maturin publish

